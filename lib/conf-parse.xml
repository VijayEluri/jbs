<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<!-- Essential properties for Nutch pieces we still use, 
     as well as config values that we commonly use, which
     can still be over-ridden by command-line args.
-->
<configuration>
  
  <!-- ================================================== -->
  <!-- jbs.Parse config properties. -->

  <!-- This is *required* for NutchWAX to work.  Nutch expects to find
       its plugins on disk, not in the Hadoop .jar file.  This config
       setting tells Hadoop to unjar the contents matching this
       pattern; so we use "*" to mean "everything".
    -->
  <property>
    <name>mapreduce.job.jar.unpack.pattern</name>
    <value>.*</value>
  </property>

  <!-- Enable boilerplate detection/extraction -->
  <property>
    <name>jbs.parse.boilerpipe</name>
    <value>true</value>
  </property>
  
  <!-- The following limits on the amount of data imported helps avoid
       situations where very large HTML, text, etc. files cause the
       import process to fail. 
    -->
  <!-- 500MB limit on all files -->
  <property>
    <name>jbs.parse.content.limit</name>
    <value>524288000</value>
  </property>
  
  <!-- 1MB limit on HTML files -->
  <property>
    <name>jbs.parse.content.limit.html</name>
    <value>1048576</value>
  </property>

  <!-- 1MB limit on TEXT files -->
  <property>
    <name>nutchwax.import.content.limit.text</name>
    <value>1048576</value>
  </property>

  <!-- Apply compression to the output, using the default codec, but
       at the block-level, which gives better compression than at the
       record-level -->
  <property>
    <name>mapred.output.compress</name>
    <value>true</value>
  </property>
  <property>
    <name>mapred.output.compression.type</name>
    <value>BLOCK</value>
  </property>
  <property>
    <name>mapred.output.compression.codec</name>
    <value>org.apache.hadoop.io.compress.DefaultCodec</value>
  </property>

  <!-- ================================================== -->
  <!-- Essential Nutch properties. -->
  <property>
    <name>plugin.folders</name>
    <value>plugins</value>
  </property>
  
  <property>
    <name>plugin.auto-activation</name>
    <value>true</value>
  </property>
  
  <property>
    <name>plugin.includes</name>
    <value>parse-(html2|pdf2|text|tika)|html-decorator</value>
  </property>

  <property>
    <name>parse.plugin.file</name>
    <value>parse-plugins.xml</value>
  </property>

  <property>
    <name>encodingdetector.charset.min.confidence</name>
    <value>1</value>
    <description>An integer between 0-100 indicating minimum confidence value
    for charset auto-detection. Any negative value disables auto-detection.
    </description>
  </property>

  <property>
    <name>parser.caching.forbidden.policy</name>
    <value>none</value>
    <description>If a site (or a page) requests through its robot metatags
    that it should not be shown as cached content, apply this policy. Currently
    three keywords are recognized: "none" ignores any "noarchive" directives.
    "content" doesn't show the content, but shows summaries (snippets).
    "all" doesn't show either content or summaries.</description>
  </property>
  
  <property>
    <description>HTML Parser implementation. Currently the following keywords are recognized: "neko" uses NekoHTML, "tagsoup" uses TagSoup.</description>
    <name>parser.html.impl</name>
    <value>neko</value>
  </property>
  
  <property>
    <name>parser.html.outlinks.ignore_tags</name>
    <value></value>
    <description>Comma separated list of HTML tags, from which outlinks 
    shouldn't be extracted. Nutch takes links from: a, area, form, frame, 
    iframe, script, link, img. If you add any of those tags here, it
    won't be taken. Default is empty list. Probably reasonable value
    for most people would be "img,script,link".</description>
  </property>

  <property>
    <name>mime.types.file</name>
    <value>tika-mimetypes.xml</value>
    <description>Name of file in CLASSPATH containing filename extension and
    magic sequence to mime types mapping information</description>
  </property>
  
  <property>
    <name>mime.type.magic</name>
    <value>true</value>
    <description>Defines if the mime content type detector uses magic resolution.
    </description>
  </property>
  
</configuration>
